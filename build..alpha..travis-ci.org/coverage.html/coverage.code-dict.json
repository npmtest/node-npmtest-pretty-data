{"/home/travis/build/npmtest/node-npmtest-pretty-data/test.js":"/* istanbul instrument in package npmtest_pretty_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pretty-data/lib.npmtest_pretty_data.js":"/* istanbul instrument in package npmtest_pretty_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pretty_data = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pretty_data = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pretty-data/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pretty-data && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pretty_data */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pretty_data\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pretty_data.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pretty_data.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pretty_data.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pretty_data.__dirname + '/lib.npmtest_pretty_data.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pretty-data/node_modules/pretty-data/pretty-data.js":"/**\n* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.\n*  \n* Version - 0.40.0\n* Copyright (c) 2012 Vadim Kiryukhin\n* vkiryukhin @ gmail.com\n* http://www.eslinstructor.net/pretty-data/\n* \n* Dual licensed under the MIT and GPL licenses:\n*   http://www.opensource.org/licenses/mit-license.php\n*   http://www.gnu.org/licenses/gpl.html\n*\n*\tpd.xml(data ) - pretty print XML;\n*\tpd.json(data) - pretty print JSON;\n*\tpd.css(data ) - pretty print CSS;\n*\tpd.sql(data)  - pretty print SQL;\n*\n*\tpd.xmlmin(data [, preserveComments] ) - minify XML; \n*\tpd.jsonmin(data)                      - minify JSON; \n*\tpd.cssmin(data [, preserveComments] ) - minify CSS; \n*\tpd.sqlmin(data)                       - minify SQL; \n*\n* PARAMETERS:\n*\n*\t@data  \t\t\t- String; XML, JSON, CSS or SQL text to beautify;\n* \t@preserveComments\t- Bool (optional, used in minxml and mincss only); \n*\t\t\t\t  Set this flag to true to prevent removing comments from @text; \n*\t@Return \t\t- String;\n*\t\n* USAGE:\n*\t\n*\tvar pd  = require('pretty-data').pd;\n*\n*\tvar xml_pp   = pd.xml(xml_text);\n*\tvar xml_min  = pd.xmlmin(xml_text [,true]);\n*\tvar json_pp  = pd.json(json_text);\n*\tvar json_min = pd.jsonmin(json_text);\n*\tvar css_pp   = pd.css(css_text);\n*\tvar css_min  = pd.cssmin(css_text [, true]);\n*\tvar sql_pp   = pd.sql(sql_text);\n*\tvar sql_min  = pd.sqlmin(sql_text);\n*\n* TEST:\n*\tcomp-name:pretty-data$ node ./test/test_xml\n*\tcomp-name:pretty-data$ node ./test/test_json\n*\tcomp-name:pretty-data$ node ./test/test_css\n*\tcomp-name:pretty-data$ node ./test/test_sql\n*/\n\n\nfunction pp() {\n\tthis.shift = ['\\n']; // array of shifts\n\tthis.step = '  ', // 2 spaces\n\t\tmaxdeep = 100, // nesting level\n\t\tix = 0;\n\n\t// initialize array with shifts //\n\tfor(ix=0;ix<maxdeep;ix++){\n\t\tthis.shift.push(this.shift[ix]+this.step); \n\t}\n\n};\t\n\t\n// ----------------------- XML section ----------------------------------------------------\n\npp.prototype.xml = function(text) {\n\n\tvar ar = text.replace(/>\\s{0,}</g,\"><\")\n\t\t\t\t .replace(/</g,\"~::~<\")\n\t\t\t\t .replace(/xmlns\\:/g,\"~::~xmlns:\")\n\t\t\t\t .replace(/xmlns\\=/g,\"~::~xmlns=\")\n\t\t\t\t .split('~::~'),\n\t\tlen = ar.length,\n\t\tinComment = false,\n\t\tdeep = 0,\n\t\tstr = '',\n\t\tix = 0;\n\n\t\tfor(ix=0;ix<len;ix++) {\n\t\t\t// start comment or <![CDATA[...]]> or <!DOCTYPE //\n\t\t\tif(ar[ix].search(/<!/) > -1) { \n\t\t\t\tstr += this.shift[deep]+ar[ix];\n\t\t\t\tinComment = true; \n\t\t\t\t// end comment  or <![CDATA[...]]> //\n\t\t\t\tif(ar[ix].search(/-->/) > -1 || ar[ix].search(/\\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { \n\t\t\t\t\tinComment = false; \n\t\t\t\t}\n\t\t\t} else \n\t\t\t// end comment  or <![CDATA[...]]> //\n\t\t\tif(ar[ix].search(/-->/) > -1 || ar[ix].search(/\\]>/) > -1) { \n\t\t\t\tstr += ar[ix];\n\t\t\t\tinComment = false; \n\t\t\t} else \n\t\t\t// <elm></elm> //\n\t\t\tif( /^<\\w/.exec(ar[ix-1]) && /^<\\/\\w/.exec(ar[ix]) &&\n\t\t\t\t/^<[\\w:\\-\\.\\,]+/.exec(ar[ix-1]) == /^<\\/[\\w:\\-\\.\\,]+/.exec(ar[ix])[0].replace('/','')) { \n\t\t\t\tstr += ar[ix];\n\t\t\t\tif(!inComment) deep--;\n\t\t\t} else\n\t\t\t // <elm> //\n\t\t\tif(ar[ix].search(/<\\w/) > -1 && ar[ix].search(/<\\//) == -1 && ar[ix].search(/\\/>/) == -1 ) {\n\t\t\t\tstr = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];\n\t\t\t} else \n\t\t\t // <elm>...</elm> //\n\t\t\tif(ar[ix].search(/<\\w/) > -1 && ar[ix].search(/<\\//) > -1) {\n\t\t\t\tstr = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];\n\t\t\t} else \n\t\t\t// </elm> //\n\t\t\tif(ar[ix].search(/<\\//) > -1) { \n\t\t\t\tstr = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];\n\t\t\t} else \n\t\t\t// <elm/> //\n\t\t\tif(ar[ix].search(/\\/>/) > -1 ) { \n\t\t\t\tstr = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];\n\t\t\t} else \n\t\t\t// <? xml ... ?> //\n\t\t\tif(ar[ix].search(/<\\?/) > -1) { \n\t\t\t\tstr += this.shift[deep]+ar[ix];\n\t\t\t} else \n\t\t\t// xmlns //\n\t\t\tif( ar[ix].search(/xmlns\\:/) > -1  || ar[ix].search(/xmlns\\=/) > -1) { \n\t\t\t\tstr += this.shift[deep]+ar[ix];\n\t\t\t} \n\t\t\t\n\t\t\telse {\n\t\t\t\tstr += ar[ix];\n\t\t\t}\n\t\t}\n\t\t\n\treturn  (str[0] == '\\n') ? str.slice(1) : str;\n}\n\n// ----------------------- JSON section ----------------------------------------------------\n\npp.prototype.json = function(text) {\n\n\tif ( typeof text === \"string\" ) {\n\t\treturn JSON.stringify(JSON.parse(text), null, this.step);\n\t}\n\tif ( typeof text === \"object\" ) {\n\t\treturn JSON.stringify(text, null, this.step);\n\t}\n\treturn null;\n}\n\n// ----------------------- CSS section ----------------------------------------------------\n\npp.prototype.css = function(text) {\n\n\tvar ar = text.replace(/\\s{1,}/g,' ')\n\t\t\t\t.replace(/\\{/g,\"{~::~\")\n\t\t\t\t.replace(/\\}/g,\"~::~}~::~\")\n\t\t\t\t.replace(/\\;/g,\";~::~\")\n\t\t\t\t.replace(/\\/\\*/g,\"~::~/*\")\n\t\t\t\t.replace(/\\*\\//g,\"*/~::~\")\n\t\t\t\t.replace(/~::~\\s{0,}~::~/g,\"~::~\")\n\t\t\t\t.split('~::~'),\n\t\tlen = ar.length,\n\t\tdeep = 0,\n\t\tstr = '',\n\t\tix = 0;\n\t\t\n\t\tfor(ix=0;ix<len;ix++) {\n\n\t\t\tif( /\\{/.exec(ar[ix]))  { \n\t\t\t\tstr += this.shift[deep++]+ar[ix];\n\t\t\t} else \n\t\t\tif( /\\}/.exec(ar[ix]))  { \n\t\t\t\tstr += this.shift[--deep]+ar[ix];\n\t\t\t} else\n\t\t\tif( /\\*\\\\/.exec(ar[ix]))  { \n\t\t\t\tstr += this.shift[deep]+ar[ix];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += this.shift[deep]+ar[ix];\n\t\t\t}\n\t\t}\n\t\treturn str.replace(/^\\n{1,}/,'');\n}\n\n// ----------------------- SQL section ----------------------------------------------------\n\nfunction isSubquery(str, parenthesisLevel) {\n  return  parenthesisLevel - (str.replace(/\\(/g,'').length - str.replace(/\\)/g,'').length )\n}\n\nfunction split_sql(str, tab) {\n\n    return str.replace(/\\s{1,}/g,\" \")\n\n        .replace(/ AND /ig,\"~::~\"+tab+tab+\"AND \")\n        .replace(/ BETWEEN /ig,\"~::~\"+tab+\"BETWEEN \")\n        .replace(/ CASE /ig,\"~::~\"+tab+\"CASE \")\n        .replace(/ ELSE /ig,\"~::~\"+tab+\"ELSE \")\n        .replace(/ END /ig,\"~::~\"+tab+\"END \")\n        .replace(/ FROM /ig,\"~::~FROM \")\n        .replace(/ GROUP\\s{1,}BY/ig,\"~::~GROUP BY \")\n        .replace(/ HAVING /ig,\"~::~HAVING \")\n        //.replace(/ IN /ig,\"~::~\"+tab+\"IN \")\n        .replace(/ IN /ig,\" IN \")\n        .replace(/ JOIN /ig,\"~::~JOIN \")\n        .replace(/ CROSS~::~{1,}JOIN /ig,\"~::~CROSS JOIN \")\n        .replace(/ INNER~::~{1,}JOIN /ig,\"~::~INNER JOIN \")\n        .replace(/ LEFT~::~{1,}JOIN /ig,\"~::~LEFT JOIN \")\n        .replace(/ RIGHT~::~{1,}JOIN /ig,\"~::~RIGHT JOIN \")\n        .replace(/ ON /ig,\"~::~\"+tab+\"ON \")\n        .replace(/ OR /ig,\"~::~\"+tab+tab+\"OR \")\n        .replace(/ ORDER\\s{1,}BY/ig,\"~::~ORDER BY \")\n        .replace(/ OVER /ig,\"~::~\"+tab+\"OVER \")\n        .replace(/\\(\\s{0,}SELECT /ig,\"~::~(SELECT \")\n        .replace(/\\)\\s{0,}SELECT /ig,\")~::~SELECT \")\n        .replace(/ THEN /ig,\" THEN~::~\"+tab+\"\")\n        .replace(/ UNION /ig,\"~::~UNION~::~\")\n        .replace(/ USING /ig,\"~::~USING \")\n        .replace(/ WHEN /ig,\"~::~\"+tab+\"WHEN \")\n        .replace(/ WHERE /ig,\"~::~WHERE \")\n        .replace(/ WITH /ig,\"~::~WITH \")\n        //.replace(/\\,\\s{0,}\\(/ig,\",~::~( \")\n        //.replace(/\\,/ig,\",~::~\"+tab+tab+\"\")\n        .replace(/ ALL /ig,\" ALL \")\n        .replace(/ AS /ig,\" AS \")\n        .replace(/ ASC /ig,\" ASC \") \n        .replace(/ DESC /ig,\" DESC \") \n        .replace(/ DISTINCT /ig,\" DISTINCT \")\n        .replace(/ EXISTS /ig,\" EXISTS \")\n        .replace(/ NOT /ig,\" NOT \")\n        .replace(/ NULL /ig,\" NULL \")\n        .replace(/ LIKE /ig,\" LIKE \")\n        .replace(/\\s{0,}SELECT /ig,\"SELECT \")\n        .replace(/~::~{1,}/g,\"~::~\")\n        .split('~::~');\n}\n\npp.prototype.sql = function(text) {\n\n    var ar_by_quote = text.replace(/\\s{1,}/g,\" \")\n                        .replace(/\\'/ig,\"~::~\\'\")\n                        .split('~::~'),\n        len = ar_by_quote.length,\n        ar = [],\n        deep = 0,\n        tab = this.step,//+this.step,\n        inComment = true,\n        inQuote = false,\n        parenthesisLevel = 0,\n        str = '',\n        ix = 0;\n\n    for(ix=0;ix<len;ix++) {\n\n        if(ix%2) {\n            ar = ar.concat(ar_by_quote[ix]);\n        } else {\n            ar = ar.concat(split_sql(ar_by_quote[ix], tab) );\n        }\n    }\n\n    len = ar.length;\n    for(ix=0;ix<len;ix++) {\n\n        parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);\n\n        if( /\\s{0,}\\s{0,}SELECT\\s{0,}/.exec(ar[ix]))  { \n            ar[ix] = ar[ix].replace(/\\,/g,\",\\n\"+tab+tab+\"\")\n        } \n\n        if( /\\s{0,}\\(\\s{0,}SELECT\\s{0,}/.exec(ar[ix]))  { \n            deep++;\n            str += this.shift[deep]+ar[ix];\n        } else \n        if( /\\'/.exec(ar[ix]) )  { \n            if(parenthesisLevel<1 && deep) {\n                deep--;\n            }\n            str += ar[ix];\n        }\n        else  { \n            str += this.shift[deep]+ar[ix];\n            if(parenthesisLevel<1 && deep) {\n                deep--;\n            }\n        } \n    }\n\n    str = str.replace(/^\\n{1,}/,'').replace(/\\n{1,}/g,\"\\n\");\n    return str;\n}\n\n// ----------------------- min section ----------------------------------------------------\n\npp.prototype.xmlmin = function(text, preserveComments) {\n\n\tvar str = preserveComments ? text\n\t\t\t\t   : text.replace(/\\<![ \\r\\n\\t]*(--([^\\-]|[\\r\\n]|-[^\\-])*--[ \\r\\n\\t]*)\\>/g,\"\");\n\treturn  str.replace(/>\\s{0,}</g,\"><\"); \n}\n\npp.prototype.jsonmin = function(text) {\n\t\t\t\t\t\t\t\t  \n    return  text.replace(/\\s{0,}\\{\\s{0,}/g,\"{\")\n                .replace(/\\s{0,}\\[$/g,\"[\")\n                .replace(/\\[\\s{0,}/g,\"[\")\n                .replace(/:\\s{0,}\\[/g,':[')\n                .replace(/\\s{0,}\\}\\s{0,}/g,\"}\")\n                .replace(/\\s{0,}\\]\\s{0,}/g,\"]\")\n                .replace(/\\\"\\s{0,}\\,/g,'\",')\n                .replace(/\\,\\s{0,}\\\"/g,',\"')\n                .replace(/\\\"\\s{0,}:/g,'\":')\n                .replace(/:\\s{0,}\\\"/g,':\"')\n                .replace(/:\\s{0,}\\[/g,':[')\n                .replace(/\\,\\s{0,}\\[/g,',[')\n                .replace(/\\,\\s{2,}/g,', ')\n                .replace(/\\]\\s{0,},\\s{0,}\\[/g,'],[');   \n}\n\npp.prototype.cssmin = function(text, preserveComments) {\n\t\n\tvar str = preserveComments ? text\n\t\t\t\t   : text.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\//g,\"\") ;\n\treturn str.replace(/\\s{1,}/g,' ')\n\t\t\t  .replace(/\\{\\s{1,}/g,\"{\")\n\t\t\t  .replace(/\\}\\s{1,}/g,\"}\")\n\t\t\t  .replace(/\\;\\s{1,}/g,\";\")\n\t\t\t  .replace(/\\/\\*\\s{1,}/g,\"/*\")\n\t\t\t  .replace(/\\*\\/\\s{1,}/g,\"*/\");\n}\t\n\npp.prototype.sqlmin = function(text) {\n    return text.replace(/\\s{1,}/g,\" \").replace(/\\s{1,}\\(/,\"(\").replace(/\\s{1,}\\)/,\")\");\n}\n\n// --------------------------------------------------------------------------------------------\n\nexports.pd= new pp;\t\n\n\n\n\n\n\n\n\n\n\n"}